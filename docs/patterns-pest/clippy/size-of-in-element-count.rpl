pattern size-of-in-element-count

patt {
    use core::intrinsics::copy::copy;
    use core::intrinsics::size_of_val;
    use core::intrinsics::arith_offset;
    use core::ptr::swap_nonoverlapping;

    #[diag = "size_of_in_element_count"]
    copy_nonoverlapping_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: usize;
        copy_nonoverlapping(_, _, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    copy_nonoverlapping_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: usize;
        copy_nonoverlapping(_, _, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    copy_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: usize;
        _ = copy::<$T>(_, _, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    copy_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: usize;
        _ = copy::<$T>(_, _, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    offset_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: usize;
        _ = Offset(_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    offset_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: usize;
        _ = Offset(_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    offset_isize_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: isize;
        _ = Offset(_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    offset_isize_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: isize;
        _ = Offset(_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    arith_offset_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: isize;
        _ = arith_offset::<$T>(_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    arith_offset_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: isize;
        _ = arith_offset::<$T>(_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    const_from_raw_parts_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: usize;
        _ = *const [$T] from (_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    const_from_raw_parts_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: usize;
        _ = *const [$T] from (_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    mut_from_raw_parts_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: usize;
        _ = *mut [$T] from (_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    mut_from_raw_parts_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: usize;
        _ = *mut [$T] from (_, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    swap_nonoverlapping_size_of_val[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = size_of_val::<$T>(_);
        let $count: usize;
        _ = swap_nonoverlapping::runtime::<$T>(_, _, copy $count);
    } where {
        product_of($count, $size)
    }
    #[diag = "size_of_in_element_count"]
    swap_nonoverlapping_size_of[$T: type] = unsafe? fn _ (..) -> _ {
        'count:
        let $size: usize = SizeOf($T);
        let $count: usize;
        _ = swap_nonoverlapping::runtime::<$T>(_, _, copy $count);
    } where {
        product_of($count, $size)
    }
}

diag {
    size_of_in_element_count = {
        primary(count) = "found a count of bytes instead of a count of elements of `{$T}`",
        help           = "use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type",
        name           = "size_of_in_element_count",
    }
}
